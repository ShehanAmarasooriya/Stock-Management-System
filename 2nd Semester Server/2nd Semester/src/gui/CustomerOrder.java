/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import connector.ServerConnector;
import controller.CustomerController;
import controller.ItemController;
import controller.TemporyItemController;
import java.awt.Color;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Customer;
import model.Item;
import model.TemporyItem;

/**
 *
 * @author Dulitha Dissanayake
 */
public class CustomerOrder extends javax.swing.JFrame {

    DefaultTableModel model;
    int tempQtyOnHand;
    //private boolean isReleased = true;
    private int isReleased = 1;
    private String lastSelectedCode;
    private ArrayList<String> finalCodeList = new ArrayList<>();
    private int saved = 0;

    /**
     * Creates new form CustomerOrder
     */
    public CustomerOrder() {
        initComponents();
        setLocationRelativeTo(null);
        fillCustomerNICCombo();
        fillItemCodeCombo();
        newButton.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        itemCombo = new javax.swing.JComboBox();
        nicCombo = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        qOnHandText = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        unitPriceText = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        qtyText = new javax.swing.JTextField();
        addToChartButton = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        totalText = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        saveButton = new javax.swing.JLabel();
        checkButton = new javax.swing.JLabel();
        newButton = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        totalText1 = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setFont(new java.awt.Font("Microsoft YaHei Light", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("         Make here Your Customer's Order");
        jLabel1.setOpaque(true);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(18, 94, 169)));

        jLabel2.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        jLabel2.setText("Customer NIC");

        jLabel3.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        jLabel3.setText("Order Id");

        jLabel4.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        jLabel4.setText("Item Code");

        itemCombo.setFont(new java.awt.Font("Microsoft YaHei", 0, 13)); // NOI18N
        itemCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----available items --" }));
        itemCombo.setSelectedIndex(-1
        );
        itemCombo.setSelectedItem(null);
        itemCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                itemComboItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemCombo, 0, 170, Short.MAX_VALUE)
                    .addComponent(nicCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nicCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(itemCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        itemTable.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 0, 13)); // NOI18N
        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Qty", "Unit Price", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemTable.setRowHeight(25);
        jScrollPane1.setViewportView(itemTable);

        jLabel5.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        jLabel5.setText("Qty on Hand");

        jLabel6.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        jLabel6.setText("Unit Price");

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 204)));

        jLabel7.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        jLabel7.setText("Qty needed");

        addToChartButton.setBackground(new java.awt.Color(0, 102, 153));
        addToChartButton.setFont(new java.awt.Font("Microsoft YaHei UI Light", 0, 14)); // NOI18N
        addToChartButton.setForeground(new java.awt.Color(255, 255, 255));
        addToChartButton.setText("   Add To Cart");
        addToChartButton.setOpaque(true);
        addToChartButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addToChartButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addComponent(qtyText, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addToChartButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qtyText, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(addToChartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel9.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        jLabel9.setText("Total");

        totalText.setEditable(false);
        totalText.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 1, 13)); // NOI18N
        totalText.setText("0");

        jLabel10.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        jLabel10.setText("Payment");

        jTextField7.setEditable(false);

        jLabel11.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        jLabel11.setText("Balance Payment");

        saveButton.setBackground(new java.awt.Color(0, 102, 153));
        saveButton.setFont(new java.awt.Font("Microsoft YaHei", 0, 14)); // NOI18N
        saveButton.setForeground(new java.awt.Color(255, 255, 255));
        saveButton.setText("           Save");
        saveButton.setOpaque(true);
        saveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveButtonMouseClicked(evt);
            }
        });

        checkButton.setBackground(new java.awt.Color(80, 121, 162));
        checkButton.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 0, 13)); // NOI18N
        checkButton.setForeground(new java.awt.Color(255, 255, 255));
        checkButton.setText("    Remove from table");
        checkButton.setOpaque(true);
        checkButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkButtonMouseClicked(evt);
            }
        });

        newButton.setBackground(new java.awt.Color(159, 3, 3));
        newButton.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        newButton.setForeground(new java.awt.Color(255, 255, 255));
        newButton.setText("     New");
        newButton.setOpaque(true);
        newButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newButtonMouseClicked(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        jLabel12.setText("Discount");

        jTextField8.setEditable(false);

        jLabel13.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        jLabel13.setText("Basic Total");

        totalText1.setEditable(false);
        totalText1.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 1, 13)); // NOI18N
        totalText1.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(unitPriceText, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(qOnHandText, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(saveButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(totalText1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(71, 71, 71)
                                .addComponent(checkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(totalText, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(33, 33, 33)
                                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(39, 39, 39))
                    .addComponent(jSeparator1)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 884, Short.MAX_VALUE)
                .addComponent(newButton, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newButton)
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalText1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(qOnHandText, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(unitPriceText, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(totalText, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void itemComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_itemComboItemStateChanged
        try {
            if (finalCodeList.isEmpty()) {
                finalCodeList.add(itemCombo.getSelectedItem().toString());
                String code = (String) itemCombo.getSelectedItem();
                ItemController itemController = ServerConnector.getServerConnector().getItemController();
                TemporyItemController tempItemController = ServerConnector.getServerConnector().getTemporyItemController();
                Item item = itemController.searchItem(code);
                double unitPrice = item.getUnitPrice();
                if (item != null) {
                    if (tempItemController.isInclude(code)) {
                        System.out.println("This is in temp " + code);
                        if (itemController.reserveItem(code)) {
                            qOnHandText.setText(Integer.toString(tempItemController.searchTempQty(code)));
                            unitPriceText.setText(Double.toString(unitPrice));
                        }
                        System.out.println("---------------");
                    } else if (itemController.reserveItem(code)) {
                        System.out.println("not in temp ***" + code);
                        qOnHandText.setText(Integer.toString(item.getQtyOnHand()));
                        unitPriceText.setText(Double.toString(item.getUnitPrice()));
                    } else {
                        JOptionPane.showMessageDialog(this, "Item has Reserved");
                        qOnHandText.setText("");
                        unitPriceText.setText("");
                    }
                }
            } else {
                System.out.println("*****-------*******");
                ItemController itemController = ServerConnector.getServerConnector().getItemController();
                itemController.releaseItem(finalCodeList.get(0));
                finalCodeList.clear();
            }
        } catch (NotBoundException | MalformedURLException | RemoteException | ClassNotFoundException | SQLException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_itemComboItemStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (!isSaved()) {
            try {
                TemporyItemController tempItemController = ServerConnector.getServerConnector().getTemporyItemController();
                ItemController itemController = ServerConnector.getServerConnector().getItemController();
                System.out.println("this is not saved");
                for (int i = 0; i < itemTable.getRowCount(); i++) {
                    tempItemController.updateUnsavedQty(itemTable.getValueAt(i, 0).toString(), Integer.parseInt(itemTable.getValueAt(i, 1).toString()));
                    tempItemController.removeFromMap(itemTable.getValueAt(i, 0).toString(), itemController);
                    if (!tempItemController.isIncludeInMap(itemTable.getValueAt(i, 0).toString())) {
                        tempItemController.removeTemp(itemTable.getValueAt(i, 0).toString());
                    }
                }
                this.dispose();
            } catch (NotBoundException | MalformedURLException | RemoteException | ClassNotFoundException | SQLException ex) {
                Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        this.dispose();

        /*try {
         ItemController itemController = ServerConnector.getServerConnector().getItemController();
         itemController.releaseItem(itemCombo.getSelectedItem().toString());
         } catch (NotBoundException ex) {
         Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
         } catch (MalformedURLException ex) {
         Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
         } catch (RemoteException ex) {
         Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
         }*/
    }//GEN-LAST:event_formWindowClosing

    private void addToChartButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addToChartButtonMouseClicked

        try {
            TemporyItemController temporyItemController = ServerConnector.getServerConnector().getTemporyItemController();
            ItemController itemController = ServerConnector.getServerConnector().getItemController();
            if (Integer.parseInt(qtyText.getText()) < 0) {
                JOptionPane.showMessageDialog(this, "Invalid Qty");
                qtyText.setText("");
            } else if (Integer.parseInt(qtyText.getText()) > Integer.parseInt(qOnHandText.getText())) {
                JOptionPane.showMessageDialog(this, "Qty is not enough");
                qtyText.setText("");
            } else {
                boolean isExists = false;
                int row = -1;
                for (int i = 0; i < itemTable.getRowCount(); i++) {
                    if (itemCombo.getSelectedItem().toString().equals(itemTable.getValueAt(i, 0).toString())) {
                        isExists = true;
                        row = i;
                        break;
                    }
                }
                if (!isExists) {
                    model = (DefaultTableModel) itemTable.getModel();
                    double amount = Double.parseDouble(unitPriceText.getText()) * Double.parseDouble(qtyText.getText());
                    Object rowData[] = {itemCombo.getSelectedItem().toString(), qtyText.getText(), unitPriceText.getText(), Double.toString(amount)};
                    model.addRow(rowData);
                    double totalAmount = Double.parseDouble(totalText.getText()) + amount;
                    totalText.setText(Double.toString(totalAmount));
                    tempQtyOnHand = Integer.parseInt(qOnHandText.getText()) - Integer.parseInt(qtyText.getText());

                    try {
                        if (temporyItemController.isInclude(itemCombo.getSelectedItem().toString())) {
                            temporyItemController.update(itemCombo.getSelectedItem().toString(), tempQtyOnHand);
                            temporyItemController.addToMapTemp(itemCombo.getSelectedItem().toString(), itemController);
                            itemController.releaseItem(itemCombo.getSelectedItem().toString());
                            finalCodeList.clear();
                        } else {
                            TemporyItem temporyItem = new TemporyItem(itemCombo.getSelectedItem().toString(), tempQtyOnHand);
                            temporyItemController.addToTemp(temporyItem);
                            temporyItemController.addToMapTemp(itemCombo.getSelectedItem().toString(), itemController);
                            itemController.releaseItem(itemCombo.getSelectedItem().toString());
                            finalCodeList.clear();
                        }
                    } catch (RemoteException | ClassNotFoundException | SQLException ex) {
                        Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    String[] options = {"Cancel", "modify Qty", "undo addition"};
                    int showOptionDialog = JOptionPane.showOptionDialog(this, "Item is already existing. Do you want to change or replace qty ?", "Warning", JOptionPane.CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, new ImageIcon("./src/thogakade/images/1.png"), options, options[0]);
                    if (showOptionDialog == 1) {
                        int newQty = Integer.parseInt(qtyText.getText());
                        int qty = Integer.parseInt(itemTable.getValueAt(row, 1).toString());
                        newQty += qty;
                        temporyItemController.removeReArrangedQty(itemTable.getValueAt(row, 0).toString(), Integer.parseInt(qtyText.getText()));
                        itemTable.setValueAt(newQty, row, 1);
                        double amount = Double.parseDouble(itemTable.getValueAt(row, 3).toString());
                        double totalAmount = Double.parseDouble(totalText.getText());
                        totalAmount -= amount;
                        double unitPrice = Double.parseDouble(itemTable.getValueAt(row, 2).toString());
                        amount = unitPrice * newQty;
                        itemTable.setValueAt(amount, row, 3);
                        totalAmount += amount;
                        totalText.setText(Double.toString(totalAmount));
                    /*} else if (showOptionDialog == 2) {
                        itemTable.setValueAt(qtyText.getText(), row, 2);
                        int qty = Integer.parseInt(itemTable.getValueAt(row, 2).toString());
                        double amount = Double.parseDouble(itemTable.getValueAt(row, 4).toString());
                        double totalAmount = Double.parseDouble(totalText.getText());
                        totalAmount -= amount;
                        double unitPrice = Double.parseDouble(itemTable.getValueAt(row, 3).toString());
                        amount = unitPrice * qty;
                        itemTable.setValueAt(amount, row, 4);
                        totalAmount += amount;
                        totalText.setText(Double.toString(totalAmount));*/
                    }
                }
            }
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addToChartButtonMouseClicked

    private void saveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseClicked
        saveButton.setBackground(new Color(22, 76, 103));
        saveButtonClicked(1);
        newButton.setVisible(true);
        qtyText.setEditable(false);
        try {
            ItemController itemController = ServerConnector.getServerConnector().getItemController();
            TemporyItemController tempItemController = ServerConnector.getServerConnector().getTemporyItemController();
            for (int i = 0; i < itemTable.getRowCount(); i++) {

                Item item = itemController.searchItem(itemTable.getValueAt(i, 0).toString());
                int qty = item.getQtyOnHand() - Integer.parseInt(itemTable.getValueAt(i, 1).toString());
                System.out.println(itemTable.getValueAt(i, 0).toString() + " , " + qty);
                itemController.updateItemQty(itemTable.getValueAt(i, 0).toString(), qty);
                tempItemController.removeFromMap(itemTable.getValueAt(i, 0).toString(), itemController);
                if (!tempItemController.isIncludeInMap(itemTable.getValueAt(i, 0).toString())) {
                    tempItemController.removeTemp(itemTable.getValueAt(i, 0).toString());
                    System.out.println("Totally removed from temp : " + itemTable.getValueAt(i, 0).toString());
                } else {
                    System.out.println("save : still includes");
                }
            }
        } catch (NotBoundException | MalformedURLException | RemoteException | ClassNotFoundException | SQLException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_saveButtonMouseClicked

    private void checkButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkButtonMouseClicked
        try {
            TemporyItemController tempItemController = ServerConnector.getServerConnector().getTemporyItemController();
            ItemController itemController = ServerConnector.getServerConnector().getItemController();
            if (itemTable.getSelectedRow() != -1) {
                int reducedQty = Integer.parseInt(itemTable.getValueAt(itemTable.getSelectedRow(), 1).toString());
                tempItemController.updateUnsavedQty(itemTable.getValueAt(itemTable.getSelectedRow(), 0).toString(), reducedQty);
                tempItemController.removeFromMap(itemTable.getValueAt(itemTable.getSelectedRow(), 0).toString(), itemController);
                if (!tempItemController.isIncludeInMap(itemTable.getValueAt(itemTable.getSelectedRow(), 0).toString())) {
                    tempItemController.removeTemp(itemTable.getValueAt(itemTable.getSelectedRow(), 0).toString());
                    System.out.println("Totally removed from temp : " + itemTable.getValueAt(itemTable.getSelectedRow(), 0).toString());
                }
                model.removeRow(itemTable.getSelectedRow());
            } else {
                JOptionPane.showMessageDialog(this, "Please select a Row to remove");
            }
        } catch (NotBoundException | MalformedURLException | RemoteException | ClassNotFoundException | SQLException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_checkButtonMouseClicked

    private void newButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newButtonMouseClicked
        this.dispose();
        CustomerOrder customerOrder=new CustomerOrder();
        customerOrder.setVisible(true);
    }//GEN-LAST:event_newButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addToChartButton;
    private javax.swing.JLabel checkButton;
    private javax.swing.JComboBox itemCombo;
    private javax.swing.JTable itemTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JLabel newButton;
    private javax.swing.JComboBox nicCombo;
    private javax.swing.JTextField qOnHandText;
    private javax.swing.JTextField qtyText;
    private javax.swing.JLabel saveButton;
    private javax.swing.JTextField totalText;
    private javax.swing.JTextField totalText1;
    private javax.swing.JTextField unitPriceText;
    // End of variables declaration//GEN-END:variables

    private void fillCustomerNICCombo() {
        try {
            CustomerController customerController = ServerConnector.getServerConnector().getCustomerController();
            ArrayList<Customer> customerList = customerController.viewAllCustomer();
            for (Customer customer : customerList) {
                nicCombo.addItem(customer.getId());
            }
        } catch (NotBoundException | MalformedURLException | RemoteException | ClassNotFoundException | SQLException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void fillItemCodeCombo() {
        try {
            itemCombo.setSelectedItem(null);
            ItemController itemController = ServerConnector.getServerConnector().getItemController();
            ArrayList<Item> itemList = itemController.getItemList();
            for (Item item : itemList) {
                itemCombo.addItem(item.getCode());
            }
        } catch (NotBoundException | MalformedURLException | RemoteException | ClassNotFoundException | SQLException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void saveButtonClicked(int i) {
        this.saved = 1;
    }

    public boolean isSaved() {
        if (this.saved == 1) {
            return true;
        }
        return false;
    }

}
